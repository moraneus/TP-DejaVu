package tests.test67_prediction

import dejavu.Verify
import org.junit.Test
import tests.util.testcase.TestCase

class Test67 extends TestCase {
  val TEST: String = PATH_TO_TESTS + "/test67_prediction"
  val resultfile = s"$TEST/dejavu-results"
  val spec1 = s"$TEST/spec1.qtl"
  val spec2 = s"$TEST/spec2.qtl"
  val log1 = s"$TEST/log1.csv"

  @Test def test1_1(): Unit = {
    Verify("--execution", "0", "--specfile", spec1, "--logfile", log1, "--resultfile", resultfile, "--bits", "5", "--prediction", "2", "--prediction_type", "smart")
    // *=1 for success, *=0 for failure
    val expected = List[String](
      "1",
      "2",
      "3",
      "4",
      "q(21)=0;q(211)=0",
      "q(21)=0;q(21)=0",
      "q(21)=0;q(1)=0",
      "q(1)=0;q(21)=0",
      "q(1)=0;q(1)=0",
      "q(1)=0;q(2)=0",
      "q(2)=0;q(21)=0",
      "q(2)=0;q(1)=0",
      "q(2)=0;q(2)=0"
    )
    checkResults(resultfile, expected:_*)
  }

  @Test def test1_2(): Unit = {
    Verify("--execution", "0", "--specfile", spec1, "--logfile", log1, "--resultfile", resultfile, "--bits", "5", "--prediction", "3", "--prediction_type", "smart")
    // *=1 for success, *=0 for failure
    val expected = List[String](
      "1",
      "2",
      "3",
      "4",
      "q(21)=0;q(211)=0;q(2111)=0",
      "q(21)=0;q(211)=0;q(1)=0",
      "q(21)=0;q(211)=0;q(211)=0",
      "q(21)=0;q(21)=0;q(211)=0",
      "q(21)=0;q(21)=0;q(21)=0",
      "q(21)=0;q(21)=0;q(1)=0",
      "q(21)=0;q(1)=0;q(211)=0",
      "q(21)=0;q(1)=0;q(2)=0",
      "q(21)=0;q(1)=0;q(1)=0",
      "q(1)=0;q(21)=0;q(211)=0",
      "q(1)=0;q(21)=0;q(21)=0",
      "q(1)=0;q(21)=0;q(1)=0",
      "q(1)=0;q(1)=0;q(21)=0",
      "q(1)=0;q(1)=0;q(1)=0",
      "q(1)=0;q(1)=0;q(2)=0",
      "q(1)=0;q(2)=0;q(21)=0",
      "q(1)=0;q(2)=0;q(1)=0",
      "q(1)=0;q(2)=0;q(2)=0",
      "q(2)=0;q(21)=0;q(211)=0",
      "q(2)=0;q(21)=0;q(21)=0",
      "q(2)=0;q(21)=0;q(1)=0",
      "q(2)=0;q(1)=0;q(21)=0",
      "q(2)=0;q(1)=0;q(1)=0",
      "q(2)=0;q(1)=0;q(2)=0",
      "q(2)=0;q(2)=0;q(21)=0",
      "q(2)=0;q(2)=0;q(1)=0",
      "q(2)=0;q(2)=0;q(2)=0"
    )
    checkResults(resultfile, expected: _*)
  }

  @Test def test1_3(): Unit = {
    Verify("--execution", "0", "--specfile", spec1, "--logfile", log1, "--resultfile", resultfile, "--bits", "5", "--prediction", "4", "--prediction_type", "smart")
    // *=1 for success, *=0 for failure
    val expected = List[String](
      "1",
      "2",
      "3",
      "4",
      "q(21)=0;q(211)=0;q(2111)=0;q(21111)=0",
      "q(21)=0;q(211)=0;q(2111)=0;q(21)=0",
      "q(21)=0;q(211)=0;q(2111)=0;q(2111)=0",
      "q(21)=0;q(211)=0;q(1)=0;q(2111)=0",
      "q(21)=0;q(211)=0;q(1)=0;q(2)=0",
      "q(21)=0;q(211)=0;q(1)=0;q(1)=0",
      "q(21)=0;q(211)=0;q(211)=0;q(2111)=0",
      "q(21)=0;q(211)=0;q(211)=0;q(1)=0",
      "q(21)=0;q(211)=0;q(211)=0;q(211)=0",
      "q(21)=0;q(21)=0;q(211)=0;q(2111)=0",
      "q(21)=0;q(21)=0;q(211)=0;q(1)=0",
      "q(21)=0;q(21)=0;q(211)=0;q(211)=0",
      "q(21)=0;q(21)=0;q(21)=0;q(211)=0",
      "q(21)=0;q(21)=0;q(21)=0;q(21)=0",
      "q(21)=0;q(21)=0;q(21)=0;q(1)=0",
      "q(21)=0;q(21)=0;q(1)=0;q(211)=0",
      "q(21)=0;q(21)=0;q(1)=0;q(2)=0",
      "q(21)=0;q(21)=0;q(1)=0;q(1)=0",
      "q(21)=0;q(1)=0;q(211)=0;q(2111)=0",
      "q(21)=0;q(1)=0;q(211)=0;q(1)=0",
      "q(21)=0;q(1)=0;q(211)=0;q(211)=0",
      "q(21)=0;q(1)=0;q(2)=0;q(211)=0",
      "q(21)=0;q(1)=0;q(2)=0;q(1)=0",
      "q(21)=0;q(1)=0;q(2)=0;q(2)=0",
      "q(21)=0;q(1)=0;q(1)=0;q(211)=0",
      "q(21)=0;q(1)=0;q(1)=0;q(2)=0",
      "q(21)=0;q(1)=0;q(1)=0;q(1)=0",
      "q(1)=0;q(21)=0;q(211)=0;q(2111)=0",
      "q(1)=0;q(21)=0;q(211)=0;q(1)=0",
      "q(1)=0;q(21)=0;q(211)=0;q(211)=0",
      "q(1)=0;q(21)=0;q(21)=0;q(211)=0",
      "q(1)=0;q(21)=0;q(21)=0;q(21)=0",
      "q(1)=0;q(21)=0;q(21)=0;q(1)=0",
      "q(1)=0;q(21)=0;q(1)=0;q(211)=0",
      "q(1)=0;q(21)=0;q(1)=0;q(2)=0",
      "q(1)=0;q(21)=0;q(1)=0;q(1)=0",
      "q(1)=0;q(1)=0;q(21)=0;q(211)=0",
      "q(1)=0;q(1)=0;q(21)=0;q(21)=0",
      "q(1)=0;q(1)=0;q(21)=0;q(1)=0",
      "q(1)=0;q(1)=0;q(1)=0;q(21)=0",
      "q(1)=0;q(1)=0;q(1)=0;q(1)=0",
      "q(1)=0;q(1)=0;q(1)=0;q(2)=0",
      "q(1)=0;q(1)=0;q(2)=0;q(21)=0",
      "q(1)=0;q(1)=0;q(2)=0;q(1)=0",
      "q(1)=0;q(1)=0;q(2)=0;q(2)=0",
      "q(1)=0;q(2)=0;q(21)=0;q(211)=0",
      "q(1)=0;q(2)=0;q(21)=0;q(21)=0",
      "q(1)=0;q(2)=0;q(21)=0;q(1)=0",
      "q(1)=0;q(2)=0;q(1)=0;q(21)=0",
      "q(1)=0;q(2)=0;q(1)=0;q(1)=0",
      "q(1)=0;q(2)=0;q(1)=0;q(2)=0",
      "q(1)=0;q(2)=0;q(2)=0;q(21)=0",
      "q(1)=0;q(2)=0;q(2)=0;q(1)=0",
      "q(1)=0;q(2)=0;q(2)=0;q(2)=0",
      "q(2)=0;q(21)=0;q(211)=0;q(2111)=0",
      "q(2)=0;q(21)=0;q(211)=0;q(1)=0",
      "q(2)=0;q(21)=0;q(211)=0;q(211)=0",
      "q(2)=0;q(21)=0;q(21)=0;q(211)=0",
      "q(2)=0;q(21)=0;q(21)=0;q(21)=0",
      "q(2)=0;q(21)=0;q(21)=0;q(1)=0",
      "q(2)=0;q(21)=0;q(1)=0;q(211)=0",
      "q(2)=0;q(21)=0;q(1)=0;q(2)=0",
      "q(2)=0;q(21)=0;q(1)=0;q(1)=0",
      "q(2)=0;q(1)=0;q(21)=0;q(211)=0",
      "q(2)=0;q(1)=0;q(21)=0;q(21)=0",
      "q(2)=0;q(1)=0;q(21)=0;q(1)=0",
      "q(2)=0;q(1)=0;q(1)=0;q(21)=0",
      "q(2)=0;q(1)=0;q(1)=0;q(1)=0",
      "q(2)=0;q(1)=0;q(1)=0;q(2)=0",
      "q(2)=0;q(1)=0;q(2)=0;q(21)=0",
      "q(2)=0;q(1)=0;q(2)=0;q(1)=0",
      "q(2)=0;q(1)=0;q(2)=0;q(2)=0",
      "q(2)=0;q(2)=0;q(21)=0;q(211)=0",
      "q(2)=0;q(2)=0;q(21)=0;q(21)=0",
      "q(2)=0;q(2)=0;q(21)=0;q(1)=0",
      "q(2)=0;q(2)=0;q(1)=0;q(21)=0",
      "q(2)=0;q(2)=0;q(1)=0;q(1)=0",
      "q(2)=0;q(2)=0;q(1)=0;q(2)=0",
      "q(2)=0;q(2)=0;q(2)=0;q(21)=0",
      "q(2)=0;q(2)=0;q(2)=0;q(1)=0",
      "q(2)=0;q(2)=0;q(2)=0;q(2)=0"
    )
    checkResults(resultfile, expected: _*)
  }

  @Test def test2_1(): Unit = {
    Verify("--execution", "0", "--specfile", spec1, "--logfile", log1, "--resultfile", resultfile, "--bits", "5", "--prediction", "2", "--prediction_type", "brute")
    // *=1 for success, *=0 for failure
    val expected = List[String](
      "1",
      "2",
      "3",
      "4",
      "q(1)=0;q(1)=0",
      "q(1)=0;q(2)=0",
      "q(1)=0;q(11)=0",
      "q(2)=0;q(1)=0",
      "q(2)=0;q(2)=0",
      "q(2)=0;q(11)=0",
      "q(11)=0;q(1)=0",
      "q(11)=0;q(2)=0",
      "q(11)=0;q(11)=0",
      "q(11)=0;q(111)=0"
    )
    checkResults(resultfile, expected: _*)
  }

  @Test def test2_2(): Unit = {
    Verify("--execution", "0", "--specfile", spec1, "--logfile", log1, "--resultfile", resultfile, "--bits", "5", "--prediction", "3", "--prediction_type", "brute")
    // *=1 for success, *=0 for failure
    val expected = List[String](
      "1",
      "2",
      "3",
      "4",
      "q(1)=0;q(1)=0;q(1)=0",
      "q(1)=0;q(1)=0;q(2)=0",
      "q(1)=0;q(1)=0;q(11)=0",
      "q(1)=0;q(2)=0;q(1)=0",
      "q(1)=0;q(2)=0;q(2)=0",
      "q(1)=0;q(2)=0;q(11)=0",
      "q(1)=0;q(11)=0;q(1)=0",
      "q(1)=0;q(11)=0;q(2)=0",
      "q(1)=0;q(11)=0;q(11)=0",
      "q(1)=0;q(11)=0;q(111)=0",
      "q(2)=0;q(1)=0;q(1)=0",
      "q(2)=0;q(1)=0;q(2)=0",
      "q(2)=0;q(1)=0;q(11)=0",
      "q(2)=0;q(2)=0;q(1)=0",
      "q(2)=0;q(2)=0;q(2)=0",
      "q(2)=0;q(2)=0;q(11)=0",
      "q(2)=0;q(11)=0;q(1)=0",
      "q(2)=0;q(11)=0;q(2)=0",
      "q(2)=0;q(11)=0;q(11)=0",
      "q(2)=0;q(11)=0;q(111)=0",
      "q(11)=0;q(1)=0;q(1)=0",
      "q(11)=0;q(1)=0;q(2)=0",
      "q(11)=0;q(1)=0;q(11)=0",
      "q(11)=0;q(1)=0;q(111)=0",
      "q(11)=0;q(2)=0;q(1)=0",
      "q(11)=0;q(2)=0;q(2)=0",
      "q(11)=0;q(2)=0;q(11)=0",
      "q(11)=0;q(2)=0;q(111)=0",
      "q(11)=0;q(11)=0;q(1)=0",
      "q(11)=0;q(11)=0;q(2)=0",
      "q(11)=0;q(11)=0;q(11)=0",
      "q(11)=0;q(11)=0;q(111)=0",
      "q(11)=0;q(111)=0;q(11)=0",
      "q(11)=0;q(111)=0;q(1)=0",
      "q(11)=0;q(111)=0;q(111)=0",
      "q(11)=0;q(111)=0;q(1111)=0",
      "q(11)=0;q(111)=0;q(2)=0"
    )
    checkResults(resultfile, expected: _*)
  }
}

