#!/bin/bash

#
# DejaVu - a tool for checking past time temporal logic properties in QTL against traces in CSV format.
#
# To use, call (after making executable with: chmod +x dejavu) as follows:
#
#   dejavu (--specfile=<filename>) (--logfile=<filename>) [--bits=numOfBits] [--mode=(debug | profile)] [--clear=(0 | 1)]
#
#   Options:
#     -s, --specfile          the path to a file containing the specification document. This is a mandatory field.
#     -l, --logfile           the path to a file containing the log in CSV format to be analyzed.
#     -p, --prefile           the path to a file containing the pre specification document.
#     -b, --bits              number indicating how many bits should be assigned to each variable in the BDD representation. If nothing is specified, the default value is 20 bits.
#     -m, --mode              specifies output modes. by default no one is active.
#     -c, --clear             indicating whether to clear generated files and folder. value of '1' is for cleaning.


for i in "$@"; do
  echo "${i}"
  case $i in
    -s=*|--specfile=*)
      SPECFILE="${i#*=}"
      shift # past argument=value
      ;;
    -p=*|--prefile=*)
      PREFILE="${i#*=}"
      shift # past argument=value
      ;;
    -l=*|--logfile=*)
      LOGFILE="${i#*=}"
      shift # past argument=value
      ;;
    -b=*|--bits=*)
      BITS="${i#*=}"
      shift # past argument=value
      ;;
    -m=*|--mode=*)
      MODE="${i#*=}"
      shift # past argument=value
      ;;
    -c=*|--clear=*)
      CLEAR="${i#*=}"
      shift # past argument=value
      ;;
    -*|--*)
      echo "Unknown option $i"
      exit 1
      ;;
    *)
      ;;
  esac
done

PARAMS_AS_STRING=""

if [ -z "${SPECFILE}" ]; then               # Can't execute without specfile
    echo "Specfile parameter is missing"
    exit
fi

if [ -z "${LOGFILE}" ]; then               # Can't execute without logfile
    echo "Logfile parameter is missing"
    exit
fi

if [ -z "${BITS}" ]; then                   # Default number of bits per variable = 20
    BITS=20
fi

PARAMS_AS_STRING+="--logfile ${LOGFILE} --bits ${BITS} "

if [ -n "${MODE}" ]; then
    PARAMS_AS_STRING+="--mode ${MODE} "
fi

if [ -n "${PREFILE}" ]; then
    PARAMS_AS_STRING+="--prefile ${PREFILE} "
fi



echo "#### Given Arguments: ${PARAMS_AS_STRING}"
echo "BDD bits per variable = ${BITS}"

DEJAVU=`dirname $0`
OUTPUT="output"
echo "Working directory: ${DEJAVU}"
echo "Output directory: ${OUTPUT}"

# Parse specification and synthesize monitor:
if [ -n "${PREFILE}" ]; then
  java -cp .:$DEJAVU/dejavu.jar dejavu.Verify --specfile $SPECFILE --prefile $PREFILE --execution 1 | grep -v "Elapsed total"
else
    java -cp .:$DEJAVU/dejavu.jar dejavu.Verify --specfile $SPECFILE --execution 1 | grep -v "Elapsed total"
fi

# Compile synthesized monitor:
echo "Compiling synthesized monitor: ..."
time scalac -cp .:$DEJAVU/dejavu.jar $OUTPUT/TraceMonitor.scala 2>&1 | grep -v "warning"

# Run the compiled monitor on trace:
echo ""
echo "Verifying trace: ..."
time scala -J-Xmx16g -cp .:$DEJAVU/dejavu.jar TraceMonitor $PARAMS_AS_STRING 2>&1\
   | grep -v "Resizing" | grep -v "load BDD package" | grep -v "Garbage collection"


# Cleaning Up:
# ============
if [ -n "${CLEAR}" ]; then
   if [ "${CLEAR}"="1" ]; then
       rm -rf $OUTPUT
   fi
fi
rm *.class