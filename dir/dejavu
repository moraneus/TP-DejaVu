#!/bin/bash

#
# DejaVu - a tool for checking past time temporal logic properties in QTL against traces in CSV format.
#
# To use, call (after making executable with: chmod +x dejavu) as follows:
#
# Usage:
#     dejavu --specfile=<filename> --logfile=<filename> [OPTIONS]
#
# Options:
#     -s, --specfile=<filename>       Path to the specification document. (Mandatory)
#     -p, --prefile=<filename>        Path to the pre-specification document. (Optional)
#     -l, --logfile=<filename>        Path to the CSV log file to be analyzed. (Mandatory)
#     -b, --bits=<numOfBits>          Number of bits for each variable in the BDD representation. (Default: 20 bits)
#     -m, --mode=(debug|profile)      Set the output mode. (Default: None)
#     -st, --stat=(true|false)        Print violations if set to true. (Optional)
#     -c, --clear=(0|1)               Clear generated files and folders. Set to '1' for cleaning. (Optional)
#
# Examples:
#     dejavu --specfile=spec.qtl --logfile=log.csv
#     dejavu --specfile=spec.qtl --logfile=log.csv --bits=16 --mode=debug --stat=true --clear=1
#     dejavu --specfile=spec.qtl --prefile=spec.pqtl --logfile=log.csv --bits=16 --mode=debug --stat=true --clear=1



for i in "$@"; do
  echo "${i}"
  case $i in
    -s=*|--specfile=*)
      SPECFILE="${i#*=}"
      shift # past argument=value
      ;;
    -p=*|--prefile=*)
      PREFILE="${i#*=}"
      shift # past argument=value
      ;;
    -l=*|--logfile=*)
      LOGFILE="${i#*=}"
      shift # past argument=value
      ;;
    -b=*|--bits=*)
      BITS="${i#*=}"
      shift # past argument=value
      ;;
    -m=*|--mode=*)
      MODE="${i#*=}"
      shift # past argument=value
      ;;
    -st=*|--stat=*)
      STAT="${i#*=}"
      shift # past argument=value
      ;;
    -c=*|--clear=*)
      CLEAR="${i#*=}"
      shift # past argument=value
      ;;
    -*|--*)
      echo "Unknown option $i"
      exit 1
      ;;
    *)
      ;;
  esac
done

PARAMS_AS_STRING=""

if [ -z "${SPECFILE}" ]; then               # Can't execute without specfile
    echo "Specfile parameter is missing"
    exit
fi

if [ -z "${LOGFILE}" ]; then               # Can't execute without logfile
    echo "Logfile parameter is missing"
    exit
fi

if [ -z "${BITS}" ]; then                   # Default number of bits per variable = 20
    BITS=20
fi

PARAMS_AS_STRING+="--logfile ${LOGFILE} --bits ${BITS} "

if [ -n "${MODE}" ]; then
    PARAMS_AS_STRING+="--mode ${MODE} "
fi

if [ -n "${PREFILE}" ]; then
    PARAMS_AS_STRING+="--prefile ${PREFILE} "
fi

if [ -n "${STAT}" ]; then
    PARAMS_AS_STRING+="--stat ${STAT} "
fi


echo "#### Given Arguments: ${PARAMS_AS_STRING}"
echo "BDD bits per variable = ${BITS}"

DEJAVU=`dirname $0`
OUTPUT="output"
echo "Working directory: ${DEJAVU}"
echo "Output directory: ${OUTPUT}"

# Parse specification and synthesize monitor:
echo "Parse specification and synthesize monitor..."
if [ -n "${PREFILE}" ]; then
  gtime java -cp .:$DEJAVU/tpdejavu.jar dejavu.Verify --specfile $SPECFILE --prefile $PREFILE --execution 1 | grep -v "Elapsed total"
else
    gtime java -cp .:$DEJAVU/tpdejavu.jar dejavu.Verify --specfile $SPECFILE --execution 1 | grep -v "Elapsed total"
fi

# Compile synthesized monitor:
echo "Compiling synthesized monitor..."
gtime scalac -cp .:$DEJAVU/tpdejavu.jar $OUTPUT/TraceMonitor.scala 2>&1 | grep -v "warning"

# Run the compiled monitor on trace:
echo ""
echo "THE RELEVANT RESULTS"
echo "####################"
echo "Verifying trace..."
gtime scala -J-Xmx16g -cp .:$DEJAVU/tpdejavu.jar TraceMonitor $PARAMS_AS_STRING 2>&1\
   | grep -v "Resizing" | grep -v "load BDD package" | grep -v "Garbage collection"
echo "####### END ########"
echo ""


# Cleaning Up:
# ============
if [ -n "${CLEAR}" ]; then
   if [ "${CLEAR}"="1" ]; then
       rm -rf $OUTPUT
   fi
fi
rm *.class
